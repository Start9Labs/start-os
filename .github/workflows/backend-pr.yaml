name: Backend PR

on:
  workflow_call:
  workflow_dispatch:

env:
  RUST_VERSION: "1.62.1"

jobs:
  build_libs:
    name: Build libs
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64]
        include:
          - target: x86_64
            snapshot_command: ./build-v8-snapshot.sh
            artifact_name: js_snapshot
            artifact_path: libs/js_engine/src/artifacts/JS_SNAPSHOT.bin
          - target: aarch64
            snapshot_command: ./build-arm-v8-snapshot.sh
            artifact_name: arm_js_snapshot
            artifact_path: libs/js_engine/src/artifacts/ARM_JS_SNAPSHOT.bin
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      if: ${{ matrix.target == 'aarch64' }}
      
    - name: Set up Docker Buildx        
      uses: docker/setup-buildx-action@v1
      if: ${{ matrix.target == 'aarch64' }}

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
      if: ${{ matrix.target == 'x86_64' }}
    
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          libs/target/
        key: ${{ runner.os }}-cargo-libs-${{ matrix.target }}-${{ hashFiles('libs/Cargo.lock') }}

    - name: Build v8 snapshot
      run: ${{ matrix.snapshot_command }}
      working-directory: libs

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_path }}

  build_backend:
    name: Build backend
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64]
        include:
          - target: x86_64
            build_command: cd backend && cargo build --release --target x86_64-unknown-linux-gnu
            snapshot_download: js_snapshot

          - target: aarch64
            build_command: make backend
            snapshot_download: arm_js_snapshot
    runs-on: ubuntu-latest
    needs: build_libs
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Download ${{ matrix.snapshot_download }} artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.snapshot_download }}
        path: libs/js_engine/src/artifacts/

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx        
      uses: docker/setup-buildx-action@v1
        
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
      if: ${{ matrix.target == 'x86_64' }}
    
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-backend-${{ hashFiles('backend/Cargo.lock') }}

    - name: Build backend
      run: ${{ matrix.build_command }}
      if: ${{ matrix.target == 'x86_64' }}

    - name: Build backend
      run: |
        docker run --rm \
        -v "/home/runner/.cargo/registry":/root/.cargo/registry \
        -v "$(pwd)":/home/rust/src \
        -P start9/rust-arm-cross:aarch64 \
        sh -c 'cd /home/rust/src/backend &&
          rustup install ${{ env.RUST_VERSION }} &&
          rustup override set ${{ env.RUST_VERSION }} &&
          rustup target add aarch64-unknown-linux-gnu &&
          cargo build --release --target ${{ matrix.target }}-unknown-linux-gnu'
      if: ${{ matrix.target == 'aarch64' }}

    - name: 'Tar files to preserve file permissions'
      run: tar -cvf backend-${{ matrix.target }}.tar ENVIRONMENT.txt GIT_HASH.txt backend/target/${{ matrix.target }}-unknown-linux-gnu/release/embassy*

    - uses: actions/upload-artifact@v3
      with:
        name: backend-${{ matrix.target }}
        path: backend-${{ matrix.target }}.tar.gz
